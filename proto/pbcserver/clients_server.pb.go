// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.2
// source: clients_server.proto

package pbcserver

import (
	proto "github.com/connet-dev/connet/proto"
	pbmodel "github.com/connet-dev/connet/proto/pbmodel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Authenticate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Token          string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ReconnectToken []byte                 `protobuf:"bytes,2,opt,name=reconnect_token,json=reconnectToken,proto3" json:"reconnect_token,omitempty"`
	BuildVersion   string                 `protobuf:"bytes,3,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Authenticate) Reset() {
	*x = Authenticate{}
	mi := &file_clients_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticate) ProtoMessage() {}

func (x *Authenticate) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticate.ProtoReflect.Descriptor instead.
func (*Authenticate) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{0}
}

func (x *Authenticate) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Authenticate) GetReconnectToken() []byte {
	if x != nil {
		return x.ReconnectToken
	}
	return nil
}

func (x *Authenticate) GetBuildVersion() string {
	if x != nil {
		return x.BuildVersion
	}
	return ""
}

type AuthenticateResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Error          *proto.Error           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Public         *pbmodel.AddrPort      `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`
	ReconnectToken []byte                 `protobuf:"bytes,3,opt,name=reconnect_token,json=reconnectToken,proto3" json:"reconnect_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AuthenticateResp) Reset() {
	*x = AuthenticateResp{}
	mi := &file_clients_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResp) ProtoMessage() {}

func (x *AuthenticateResp) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResp.ProtoReflect.Descriptor instead.
func (*AuthenticateResp) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticateResp) GetError() *proto.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AuthenticateResp) GetPublic() *pbmodel.AddrPort {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *AuthenticateResp) GetReconnectToken() []byte {
	if x != nil {
		return x.ReconnectToken
	}
	return nil
}

type Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Soft one-of
	Announce      *Request_Announce `protobuf:"bytes,1,opt,name=announce,proto3" json:"announce,omitempty"`
	Relay         *Request_Relay    `protobuf:"bytes,2,opt,name=relay,proto3" json:"relay,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_clients_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetAnnounce() *Request_Announce {
	if x != nil {
		return x.Announce
	}
	return nil
}

func (x *Request) GetRelay() *Request_Relay {
	if x != nil {
		return x.Relay
	}
	return nil
}

type Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *proto.Error           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Soft one-of if error is nil
	Announce      *Response_Announce `protobuf:"bytes,2,opt,name=announce,proto3" json:"announce,omitempty"`
	Relay         *Response_Relays   `protobuf:"bytes,3,opt,name=relay,proto3" json:"relay,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_clients_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetError() *proto.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Response) GetAnnounce() *Response_Announce {
	if x != nil {
		return x.Announce
	}
	return nil
}

func (x *Response) GetRelay() *Response_Relays {
	if x != nil {
		return x.Relay
	}
	return nil
}

type ClientPeer struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Direct            *DirectRoute           `protobuf:"bytes,1,opt,name=direct,proto3" json:"direct,omitempty"` // TODO remove in 0.9.0
	Relays            []*pbmodel.HostPort    `protobuf:"bytes,2,rep,name=relays,proto3" json:"relays,omitempty"` // TODO remove in 0.10.0
	Directs           []*pbmodel.AddrPort    `protobuf:"bytes,3,rep,name=directs,proto3" json:"directs,omitempty"`
	RelayIds          []string               `protobuf:"bytes,6,rep,name=relayIds,proto3" json:"relayIds,omitempty"`
	ServerCertificate []byte                 `protobuf:"bytes,4,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	ClientCertificate []byte                 `protobuf:"bytes,5,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClientPeer) Reset() {
	*x = ClientPeer{}
	mi := &file_clients_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPeer) ProtoMessage() {}

func (x *ClientPeer) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPeer.ProtoReflect.Descriptor instead.
func (*ClientPeer) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{4}
}

func (x *ClientPeer) GetDirect() *DirectRoute {
	if x != nil {
		return x.Direct
	}
	return nil
}

func (x *ClientPeer) GetRelays() []*pbmodel.HostPort {
	if x != nil {
		return x.Relays
	}
	return nil
}

func (x *ClientPeer) GetDirects() []*pbmodel.AddrPort {
	if x != nil {
		return x.Directs
	}
	return nil
}

func (x *ClientPeer) GetRelayIds() []string {
	if x != nil {
		return x.RelayIds
	}
	return nil
}

func (x *ClientPeer) GetServerCertificate() []byte {
	if x != nil {
		return x.ServerCertificate
	}
	return nil
}

func (x *ClientPeer) GetClientCertificate() []byte {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

type ServerPeer struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Direct            *DirectRoute           `protobuf:"bytes,2,opt,name=direct,proto3" json:"direct,omitempty"` // TODO remove in 0.9.0
	Relays            []*pbmodel.HostPort    `protobuf:"bytes,3,rep,name=relays,proto3" json:"relays,omitempty"` // TODO remove in 0.10.0
	Directs           []*pbmodel.AddrPort    `protobuf:"bytes,4,rep,name=directs,proto3" json:"directs,omitempty"`
	RelayIds          []string               `protobuf:"bytes,7,rep,name=relayIds,proto3" json:"relayIds,omitempty"`
	ServerCertificate []byte                 `protobuf:"bytes,5,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	ClientCertificate []byte                 `protobuf:"bytes,6,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ServerPeer) Reset() {
	*x = ServerPeer{}
	mi := &file_clients_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPeer) ProtoMessage() {}

func (x *ServerPeer) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPeer.ProtoReflect.Descriptor instead.
func (*ServerPeer) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{5}
}

func (x *ServerPeer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerPeer) GetDirect() *DirectRoute {
	if x != nil {
		return x.Direct
	}
	return nil
}

func (x *ServerPeer) GetRelays() []*pbmodel.HostPort {
	if x != nil {
		return x.Relays
	}
	return nil
}

func (x *ServerPeer) GetDirects() []*pbmodel.AddrPort {
	if x != nil {
		return x.Directs
	}
	return nil
}

func (x *ServerPeer) GetRelayIds() []string {
	if x != nil {
		return x.RelayIds
	}
	return nil
}

func (x *ServerPeer) GetServerCertificate() []byte {
	if x != nil {
		return x.ServerCertificate
	}
	return nil
}

func (x *ServerPeer) GetClientCertificate() []byte {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

type DirectRoute struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Addresses         []*pbmodel.AddrPort    `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	ServerCertificate []byte                 `protobuf:"bytes,2,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	ClientCertificate []byte                 `protobuf:"bytes,3,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DirectRoute) Reset() {
	*x = DirectRoute{}
	mi := &file_clients_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectRoute) ProtoMessage() {}

func (x *DirectRoute) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectRoute.ProtoReflect.Descriptor instead.
func (*DirectRoute) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{6}
}

func (x *DirectRoute) GetAddresses() []*pbmodel.AddrPort {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *DirectRoute) GetServerCertificate() []byte {
	if x != nil {
		return x.ServerCertificate
	}
	return nil
}

func (x *DirectRoute) GetClientCertificate() []byte {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

type Relay struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Address           *pbmodel.HostPort      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // TODO remove in 0.10.0
	Addresses         []*pbmodel.HostPort    `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`
	ServerCertificate []byte                 `protobuf:"bytes,2,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Relay) Reset() {
	*x = Relay{}
	mi := &file_clients_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{7}
}

func (x *Relay) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Relay) GetAddress() *pbmodel.HostPort {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Relay) GetAddresses() []*pbmodel.HostPort {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Relay) GetServerCertificate() []byte {
	if x != nil {
		return x.ServerCertificate
	}
	return nil
}

type Request_Announce struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Forward       *pbmodel.Forward       `protobuf:"bytes,1,opt,name=forward,proto3" json:"forward,omitempty"`
	Role          pbmodel.Role           `protobuf:"varint,2,opt,name=role,proto3,enum=model.Role" json:"role,omitempty"`
	Peer          *ClientPeer            `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request_Announce) Reset() {
	*x = Request_Announce{}
	mi := &file_clients_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request_Announce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Announce) ProtoMessage() {}

func (x *Request_Announce) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Announce.ProtoReflect.Descriptor instead.
func (*Request_Announce) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Request_Announce) GetForward() *pbmodel.Forward {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *Request_Announce) GetRole() pbmodel.Role {
	if x != nil {
		return x.Role
	}
	return pbmodel.Role(0)
}

func (x *Request_Announce) GetPeer() *ClientPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type Request_Relay struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Forward           *pbmodel.Forward       `protobuf:"bytes,1,opt,name=forward,proto3" json:"forward,omitempty"`
	Role              pbmodel.Role           `protobuf:"varint,2,opt,name=role,proto3,enum=model.Role" json:"role,omitempty"`
	ClientCertificate []byte                 `protobuf:"bytes,3,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"` // certificate to use when connecting to a relay
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Request_Relay) Reset() {
	*x = Request_Relay{}
	mi := &file_clients_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request_Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Relay) ProtoMessage() {}

func (x *Request_Relay) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Relay.ProtoReflect.Descriptor instead.
func (*Request_Relay) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Request_Relay) GetForward() *pbmodel.Forward {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *Request_Relay) GetRole() pbmodel.Role {
	if x != nil {
		return x.Role
	}
	return pbmodel.Role(0)
}

func (x *Request_Relay) GetClientCertificate() []byte {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

type Response_Announce struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*ServerPeer          `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response_Announce) Reset() {
	*x = Response_Announce{}
	mi := &file_clients_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response_Announce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_Announce) ProtoMessage() {}

func (x *Response_Announce) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_Announce.ProtoReflect.Descriptor instead.
func (*Response_Announce) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Response_Announce) GetPeers() []*ServerPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type Response_Relays struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Relays        []*Relay               `protobuf:"bytes,1,rep,name=relays,proto3" json:"relays,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response_Relays) Reset() {
	*x = Response_Relays{}
	mi := &file_clients_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response_Relays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_Relays) ProtoMessage() {}

func (x *Response_Relays) ProtoReflect() protoreflect.Message {
	mi := &file_clients_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_Relays.ProtoReflect.Descriptor instead.
func (*Response_Relays) Descriptor() ([]byte, []int) {
	return file_clients_server_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Response_Relays) GetRelays() []*Relay {
	if x != nil {
		return x.Relays
	}
	return nil
}

var File_clients_server_proto protoreflect.FileDescriptor

var file_clients_server_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x72, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x88, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x1a, 0x85,
	0x01, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x81, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x28, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x52, 0x05, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x1a, 0x3c, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x1a,
	0x37, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x52, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x0a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x06,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x01, 0x0a,
	0x0b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x2e, 0x5a, 0x2c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x74, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x62, 0x63, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clients_server_proto_rawDescOnce sync.Once
	file_clients_server_proto_rawDescData = file_clients_server_proto_rawDesc
)

func file_clients_server_proto_rawDescGZIP() []byte {
	file_clients_server_proto_rawDescOnce.Do(func() {
		file_clients_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_clients_server_proto_rawDescData)
	})
	return file_clients_server_proto_rawDescData
}

var file_clients_server_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_clients_server_proto_goTypes = []any{
	(*Authenticate)(nil),      // 0: clients_server.Authenticate
	(*AuthenticateResp)(nil),  // 1: clients_server.AuthenticateResp
	(*Request)(nil),           // 2: clients_server.Request
	(*Response)(nil),          // 3: clients_server.Response
	(*ClientPeer)(nil),        // 4: clients_server.ClientPeer
	(*ServerPeer)(nil),        // 5: clients_server.ServerPeer
	(*DirectRoute)(nil),       // 6: clients_server.DirectRoute
	(*Relay)(nil),             // 7: clients_server.Relay
	(*Request_Announce)(nil),  // 8: clients_server.Request.Announce
	(*Request_Relay)(nil),     // 9: clients_server.Request.Relay
	(*Response_Announce)(nil), // 10: clients_server.Response.Announce
	(*Response_Relays)(nil),   // 11: clients_server.Response.Relays
	(*proto.Error)(nil),       // 12: proto.Error
	(*pbmodel.AddrPort)(nil),  // 13: model.AddrPort
	(*pbmodel.HostPort)(nil),  // 14: model.HostPort
	(*pbmodel.Forward)(nil),   // 15: model.Forward
	(pbmodel.Role)(0),         // 16: model.Role
}
var file_clients_server_proto_depIdxs = []int32{
	12, // 0: clients_server.AuthenticateResp.error:type_name -> proto.Error
	13, // 1: clients_server.AuthenticateResp.public:type_name -> model.AddrPort
	8,  // 2: clients_server.Request.announce:type_name -> clients_server.Request.Announce
	9,  // 3: clients_server.Request.relay:type_name -> clients_server.Request.Relay
	12, // 4: clients_server.Response.error:type_name -> proto.Error
	10, // 5: clients_server.Response.announce:type_name -> clients_server.Response.Announce
	11, // 6: clients_server.Response.relay:type_name -> clients_server.Response.Relays
	6,  // 7: clients_server.ClientPeer.direct:type_name -> clients_server.DirectRoute
	14, // 8: clients_server.ClientPeer.relays:type_name -> model.HostPort
	13, // 9: clients_server.ClientPeer.directs:type_name -> model.AddrPort
	6,  // 10: clients_server.ServerPeer.direct:type_name -> clients_server.DirectRoute
	14, // 11: clients_server.ServerPeer.relays:type_name -> model.HostPort
	13, // 12: clients_server.ServerPeer.directs:type_name -> model.AddrPort
	13, // 13: clients_server.DirectRoute.addresses:type_name -> model.AddrPort
	14, // 14: clients_server.Relay.address:type_name -> model.HostPort
	14, // 15: clients_server.Relay.addresses:type_name -> model.HostPort
	15, // 16: clients_server.Request.Announce.forward:type_name -> model.Forward
	16, // 17: clients_server.Request.Announce.role:type_name -> model.Role
	4,  // 18: clients_server.Request.Announce.peer:type_name -> clients_server.ClientPeer
	15, // 19: clients_server.Request.Relay.forward:type_name -> model.Forward
	16, // 20: clients_server.Request.Relay.role:type_name -> model.Role
	5,  // 21: clients_server.Response.Announce.peers:type_name -> clients_server.ServerPeer
	7,  // 22: clients_server.Response.Relays.relays:type_name -> clients_server.Relay
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_clients_server_proto_init() }
func file_clients_server_proto_init() {
	if File_clients_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clients_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clients_server_proto_goTypes,
		DependencyIndexes: file_clients_server_proto_depIdxs,
		MessageInfos:      file_clients_server_proto_msgTypes,
	}.Build()
	File_clients_server_proto = out.File
	file_clients_server_proto_rawDesc = nil
	file_clients_server_proto_goTypes = nil
	file_clients_server_proto_depIdxs = nil
}
